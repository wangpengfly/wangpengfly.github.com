---
layout: post
title: 小飞的电梯调度
description: 
category: 面试笔试题
tags: [每日一题]
---
{% include JB/setup %}

### 题目
（编程之美 1.8）一栋楼有6层，现在设计一种电梯调度算法：电梯在一楼让大家上电梯，然后根据大家选择要到的楼层算出某一楼层i，电梯在i层停下让所有人下电梯，然后大家爬楼梯达到自己的楼层。请问电梯停在哪一层，可以使得这一次的所有乘客爬楼层之和最短？

### 解答
最简单的想法就是遍历每一层，依次求出每一层所有人爬楼总和，总和最小的那一层即是答案，这样的话时间复杂度就是`O（N * N）`。

另一种做法就是：假设停在i层，有N1个人在i层之下，N2个人在i层，N3个人在i层之上，若电梯停在i + 1层，则爬楼层总和需要增加 N1 + N2 - N3层，若N1 + N2 - N3小于0，则i + 1层爬楼总和更小。所以按照这个思路，时间复杂度为`O（N）`

### 注意
偏离最小值楼层越多的楼层，总爬楼层数越大，所以一旦i + 1层所爬楼层总数大于i层，就不需要往上继续找了。

### 代码

	#include <iostream>  
	using namespace std;  
  
	int elevator(int *person, int n)  
	{  
    	int minFloor = 0;  
    	int targetFloor = 1;  
    	int N1 = 0;  
    	int N2 = person[1];  
    	int N3 = 0;  
    	for(int i = 2; i < n; i++)  
    	{  
        	N3 += person[i];  
        	minFloor = person[i] * (i - 1);  
    	}  
  
    	for(int i = 2; i < n; i++)  
    	{  
        	if(N1 + N2 < N3)  
        	{  
            	targetFloor = i;  
            	minFloor += (N1 + N2 - N3);  
            	N1 += N2;  
            	N2 = person[i];  
            	N3 -= person[i];  
        	}  
        	else  
            	break;  
    	}  
  
    	return targetFloor;  
	}  
  
	//test  
	int main()  
	{  
    	int person[7] = {0, 1, 2, 3, 2, 1, 2};  
    	cout << elevator(person, 7) << endl;  
    	return 0;  
	}  
