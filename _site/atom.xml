<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>wpandveil</title>
 <link href="http://wangpengfly.github.com/atom.xml" rel="self"/>
 <link href="http://wangpengfly.github.com"/>
 <updated>2013-07-01T20:35:47+08:00</updated>
 <id>http://wangpengfly.github.com</id>
 <author>
   <name>wpandveil</name>
   <email>wpandveil@gmail.com</email>
 </author>

 
 <entry>
   <title>链表中倒数第K个节点</title>
   <link href="http://wangpengfly.github.com/2013/07/01/%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACK%E4%B8%AA%E8%8A%82%E7%82%B9.html"/>
   <updated>2013-07-01T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/07/01/链表中倒数第K个节点</id>
   <content type="html">&lt;h3 id='id85'&gt;题目&lt;/h3&gt;

&lt;p&gt;给出一个单链表的头节点，写一个函数获得其倒数第K个节点&lt;/p&gt;

&lt;h3 id='id86'&gt;解答&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;最简单的做法是：先遍历链表，获得链表的长度n，然后再次遍历链表，从头节点开始的第n - K + 1即是所求节点。&lt;/li&gt;

&lt;li&gt;优化一下的做法是：使用两个指针，一个先向前遍历K 个节点，另外一个指着头节点，然后两个指针一起向前遍历链表直到链表结尾。这时后面一个节点所指的就是倒数第K个节点&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id87'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/*******************************************************
**question 2
********************************************************/
ListNode *getKthNodeFromTail(ListNode *phead, int k)
{
	if(phead == NULL || k &amp;lt;= 0) return NULL;
	ListNode *pBegin = phead;
	ListNode *pEnd = phead;
	for(int i = 0; i &amp;lt; k - 1; i++)
	{
		if(pBegin-&amp;gt;next != NULL)
			pBegin = pBegin-&amp;gt;next;
		else
			return NULL;
	}

	while(pBegin-&amp;gt;next != NULL)
	{
		pBegin = pBegin-&amp;gt;next;
		pEnd = pEnd-&amp;gt;next;
	}
	return pEnd;
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id88'&gt;测试用例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//test
/*********************************
arr[10] = {....} k = 10
arr[10] = {....} k = 1
arr[10] = {....} k = 5
**********************************/
int main()
{
	int arr[1] = {1};
	ListNode *phead = makeList(arr, 1);
	getKthNodeFromTail(phead, 1);
	return 0;
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>反转链表</title>
   <link href="http://wangpengfly.github.com/2013/07/01/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html"/>
   <updated>2013-07-01T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/07/01/反转链表</id>
   <content type="html">&lt;h3 id='id82'&gt;题目&lt;/h3&gt;

&lt;p&gt;给定一个单链表的头节点指针，请反转该单链表，并返回反转之后的单链表的头节点指针&lt;/p&gt;

&lt;h3 id='id83'&gt;解答&lt;/h3&gt;

&lt;p&gt;使用两个指针，反转链表，这个比较简单。&lt;/p&gt;

&lt;h3 id='id84'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/*******************************************************
**question 3
********************************************************/
ListNode *reverseList(ListNode *phead)
{
	if(phead == NULL) return NULL;
	if(phead-&amp;gt;next == NULL) return phead;
	ListNode *pBegin = phead-&amp;gt;next;
	ListNode *pEnd = phead;
	pEnd-&amp;gt;next = NULL;
	do
	{
		ListNode *pTemp = pBegin-&amp;gt;next;
		pBegin-&amp;gt;next = pEnd;
		pEnd = pBegin;
		pBegin = pTemp;
	}while(pBegin != NULL);
	return pEnd;
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>从尾到头打印链表</title>
   <link href="http://wangpengfly.github.com/2013/07/01/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.html"/>
   <updated>2013-07-01T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/07/01/从尾到头打印链表</id>
   <content type="html">&lt;h3 id='id79'&gt;题目&lt;/h3&gt;

&lt;p&gt;给定一个单链表的头节点，从尾到头打印出该链表的所有节点&lt;/p&gt;

&lt;h3 id='id80'&gt;解答&lt;/h3&gt;

&lt;p&gt;1. 使用递归，在递归中，若节点有后续节点，则先处理后续节点，再打印本节点的数据 2. 递归的本质就是使用栈，所以可以不是用递归，而是在遍历链表的时候将链表数据压入栈中，遍历结束之后出栈就可以得到从尾到头的所有节点值&lt;/p&gt;

&lt;h3 id='id81'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/*******************************************************
**question 1
********************************************************/

//solution 1
void printListFromTail_1(ListNode *phead)
{
	if(phead == NULL) return;
	printListFromTail_1(phead-&amp;gt;next);
	cout &amp;lt;&amp;lt; phead-&amp;gt;data &amp;lt;&amp;lt; endl;
}

//solution
void printListFromTail_2(ListNode *phead)
{
	if(phead == NULL) return;
	stack&amp;lt;int&amp;gt; myStack;
	ListNode *node = phead;
	do
	{
		myStack.push(node-&amp;gt;data);
		node = node-&amp;gt;next;
	}while(node != NULL);

	while(myStack.size() &amp;gt; 0)
	{
		cout &amp;lt;&amp;lt; myStack.top() &amp;lt;&amp;lt; endl;
		myStack.pop();
	}
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>七八月个人规划</title>
   <link href="http://wangpengfly.github.com/2013/07/01/%E4%B8%83%E5%85%AB%E6%9C%88%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92.html"/>
   <updated>2013-07-01T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/07/01/七八月个人规划</id>
   <content type="html">&lt;h3 id='id77'&gt;个人要求&lt;/h3&gt;

&lt;p&gt;1. 至少每天一篇博文 2. 完成以下书单&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;完成libevent的源码阅读&lt;/li&gt;

&lt;li&gt;加强锻炼，争取增重5斤&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id78'&gt;数单&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;操作系统：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;《现代操作系统》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;算法与数据结构：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;《算法导论》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;数据库：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;基本sql语言的复习&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;网络：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;《计算机网络》 《TCP/ip详解 卷1》部分TCP章节&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C++语言：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;《effective c++》 《more effective c++》 《STL源码剖析》 《深度探索C++对象模型》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;笔试面试题：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;《剑指offer》 《编程之美》 《carrer cup》 《编程珠玑》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;专业相关：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;《UNIX网络编程 卷1》 《UNIX环境高级编程》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>编写正确的二分查找算法</title>
   <link href="http://wangpengfly.github.com/2013/06/25/%E7%BC%96%E5%86%99%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95.html"/>
   <updated>2013-06-25T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/25/编写正确的二分查找算法</id>
   <content type="html">&lt;h3 id='id69'&gt;题目&lt;/h3&gt;

&lt;p&gt;（编程之美 3.11）编写一个正确的二分查找算法，对一个升序的数组进行排序，若数组中有多个一样的，则返回下标最大的那个。&lt;/p&gt;

&lt;h3 id='id70'&gt;解答&lt;/h3&gt;

&lt;p&gt;二分查找是一个最基本的算法，但是编写一个正确的二分查找算法还是不太容易，因为一步小心就容易造成一些小错误。《编程珠玑》第四章就专门介绍了“二分搜索的挑战”。&lt;/p&gt;

&lt;p&gt;如何返回下标最大的那个值的下标？只要保证在比较的时候，先比较&lt;code&gt;value&lt;/code&gt;是不是比以&lt;code&gt;mid&lt;/code&gt;为下标的元素的值大，总是优先让begin赋值为mid。最后当&lt;code&gt;begin == end - 1&lt;/code&gt;的时候，也总是先比较&lt;code&gt;arr[end]&lt;/code&gt;与&lt;code&gt;value&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id='id71'&gt;注意&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;mid = （begin + end）/ 2&lt;/code&gt;可能造成溢出，所以使用&lt;code&gt;mid = begin + （end - begin） / 2&lt;/code&gt;代替 需要仔细设计测试用例，保证不会进入死循环&lt;/p&gt;

&lt;h3 id='id72'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
using namespace std;  
//非递归  
int binarySearch(int *arr, int begin, int end, int value)  
{  
	if(arr == 0) return -1;  
	int mid;  
	while(begin &amp;lt; end - 1)  
	{  
    	mid = begin + (end - begin) / 2;  
    	if(value &amp;gt;= arr[mid])  
        	begin = mid;  
    	else  
        	end = mid;  
	}  	
	if(arr[end] == value)  
    	return end;  
	else if(arr[begin] == value)  
    	return begin;  
	return -1;  
}  
//递归  
int binarySearch2(int *arr, int begin, int end, int value)  
{  
	if(arr == 0) return -1;  
	int mid;  
	if(begin &amp;lt; end - 1)  
	{  
    	mid = begin + (end - begin) / 2;  
    	if(value &amp;gt;= arr[mid])  
        	begin = mid;  
    	else  
        	end = mid;  
	}  
	else  
	{  
    	if(arr[end] == value)  
    	    return end;  
    	else if(arr[begin] == value)  
    	    return begin;  
    	else  
    	    return -1;  
	}  
	return binarySearch2(arr, begin, end, value);  
}  

//测试  
int main()  
{  
	int a1[1] = {1};  
	int a3[4] = {1, 2, 2, 4};  
	int a4[2] = {1, 3};  
	int a5[3] = {1, 2, 3};  

	cout &amp;lt;&amp;lt; binarySearch2(a1, 0, 0, 1) &amp;lt;&amp;lt; endl;  
	cout &amp;lt;&amp;lt; binarySearch2(a3, 0, 3, 2) &amp;lt;&amp;lt; endl;  
	cout &amp;lt;&amp;lt; binarySearch2(a4, 0, 1, 2) &amp;lt;&amp;lt; endl;  
	cout &amp;lt;&amp;lt; binarySearch2(a5, 0, 2, 2) &amp;lt;&amp;lt; endl;  

	return 0;  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>求序列的全排列</title>
   <link href="http://wangpengfly.github.com/2013/06/25/%E6%B1%82%E5%BA%8F%E5%88%97%E7%9A%84%E5%85%A8%E6%8E%92%E5%88%97.html"/>
   <updated>2013-06-25T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/25/求序列的全排列</id>
   <content type="html">&lt;h3 id='id59'&gt;题目&lt;/h3&gt;

&lt;p&gt;给定一个序列，求出其全排列，并保证有序。例如字符串123的全排列是123,132,213,231,312,321。&lt;/p&gt;

&lt;h3 id='id60'&gt;解答&lt;/h3&gt;

&lt;h4 id='id61'&gt;递归解法。&lt;/h4&gt;

&lt;p&gt;从第一个数开始的每一个数字与其后面的数字交换。如果序列中存在重复数据，比如122，则在交换之前看两个交换数字之间有没有与下标比较大的交换数字相等的数字，如果有的话，则不交换。比如122中，1与第二个2交换，发现中间有一个2，所以不交换，因为它们即使交换，得到的排列是221，但是1与第一个2交换得到了212可以进一步通过交换获得221.&lt;/p&gt;

&lt;h4 id='id62'&gt;非递归解法，使用字典序算法。&lt;/h4&gt;

&lt;p&gt;基本思路是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;对于输入的字典许排列&amp;lt;a1,a2,…,an&amp;gt;，反向查找第一对满足`a[j]` &amp;lt; `a[j+1]` 的下标j
仍旧反向查找一个下标k，使得 `a[j]`&amp;lt;`a[k]`并且`a[k]`=min{`a[t]` | any t, `a[j]`&amp;lt;`a[t]`}
交换`a[j]`和`a[k]`
反转`a[j+1..n]`  &lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id63'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
#include &amp;lt;algorithm&amp;gt;  
using namespace std;  

//防止产生重复排列  
bool canSwap(char *arr, int begin, int end)  
{  
	char v = arr[end];  
	for(int i = begin; i &amp;lt; end; i++)  
	{  
	    if(arr[i] == v)  
	        return false;  
	}  
	return true;  
}  

//递归解法  
void AllRange(char *arr, int k, int m)  
{  
	if(k == m)  
	{  
	    printf(&amp;quot;%s\n&amp;quot;, arr);  
	}  
	else  
	{  
	    for(int i = k; i &amp;lt;= m; i++)  
	    {  
	        if(canSwap(arr, k, i))  
	        {  
	            swap(arr[k], arr[i]);  
	            AllRange(arr, k + 1, m);  
	            swap(arr[k], arr[i]);  
	        }  
	    }  
	}  
}  

//非递归解法，字典序算法  
bool getNext(char *arr, int n)  
{  
	if(arr == NULL || n &amp;lt;= 1)  
	    return false;  
	int j = n - 2;  
	while(j &amp;gt;= 0 &amp;amp;&amp;amp; arr[j] &amp;gt;= arr[j + 1])  
	{  
	    j--;  
	}  
	if(j &amp;lt; 0)  
	    return false;  

	int i = n - 1;  
	while(arr[j] &amp;gt;= arr[i] &amp;amp;&amp;amp; i &amp;gt; j)  
	{  
	    i--;  
	}  

	swap(arr[i], arr[j]);  
	while(j + 1 &amp;lt; n - 1)  
	{  
	    swap(arr[j + 1], arr[n - 1]);  
	    j++;  
	    n--;  
	}  
	return true;  
}  

//测试  
int main()  
{  
	//char arr[4] = &amp;quot;111&amp;quot;;  
	//char arr[4] = &amp;quot;123&amp;quot;;  
	//char arr[4] = &amp;quot;122&amp;quot;;  
	char arr[4] = &amp;quot;321&amp;quot;;  
	cout &amp;lt;&amp;lt; &amp;quot;递归结果：&amp;quot; &amp;lt;&amp;lt; endl;  
	AllRange(arr, 0, 2);  

	cout &amp;lt;&amp;lt; &amp;quot;非递归结果：&amp;quot; &amp;lt;&amp;lt; endl;  
	sort(arr, arr + 3);  
	cout &amp;lt;&amp;lt; arr &amp;lt;&amp;lt; endl;  
	while(getNext(arr, 3))  
	{  
	    cout &amp;lt;&amp;lt; arr &amp;lt;&amp;lt; endl;  
	}  

	return 0;  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>小于等于N的所有正整数中包含的1的个数</title>
   <link href="http://wangpengfly.github.com/2013/06/25/%E6%B1%82%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8EN%E7%9A%84%E6%89%80%E6%9C%89%E6%AD%A3%E6%95%B4%E6%95%B0%E9%87%8C%E9%9D%A2%E5%8C%85%E5%90%AB%E7%9A%841%E7%9A%84%E4%B8%AA%E6%95%B0.html"/>
   <updated>2013-06-25T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/25/求小于等于N的所有正整数里面包含的1的个数</id>
   <content type="html">&lt;h3 id='id53'&gt;题目&lt;/h3&gt;

&lt;p&gt;已知一个正整数N，求比N小（包括N）的所有正整数中包含的1的个数。例如N = 12，则包含5个1，分别为1、10、11、12&lt;/p&gt;

&lt;h3 id='id54'&gt;解答&lt;/h3&gt;

&lt;p&gt;最直观最简单的想法是，从1到N对每一个数检查，得出每个数中包含的一的个数，事件复杂度大概是&lt;code&gt;O（N）&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;时间复杂度比较高，不是最优算法。一个比它快的算法是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对N的每一位进行检查，得出比N小的正数某一位包含的1的个数总和。&lt;/p&gt;

&lt;p&gt;比如1234， 千位包含234 + 1个1（1000 ～ 1234）， 百位包含 2 * 100个1（1100 ～ 1199， 100 ～ 199）， 十位包含13 * 10个1（1210 ～ 1219，1110 ～ 1119，。。。。。。，10 ～ 19）， 个位包含124 * 1个1（1231，1221，1211，1201，。。。。。。，1）。 按照这个思路可以写出代码如下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id55'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
#include &amp;lt;stdio.h&amp;gt;  
#include &amp;lt;string.h&amp;gt;  
#include &amp;lt;math.h&amp;gt;  
using namespace std;  

int getNumAfterI(char *buf, int i, int len)  
{  
	int sum = 0;  
	for(int j = i + 1; j &amp;lt; len; j++)  
    	sum = sum * 10 + (buf[j] - &amp;#39;0&amp;#39;);  
	return sum + 1;  
}  

int NumOf1AfterN(int n)  
{  
	int sum = 0;  
	int num = 0;  
	char buf[20];  
	sprintf(buf, &amp;quot;%d&amp;quot;, n);  
	int len = strlen(buf);  

	for(int i = 0; i &amp;lt; len; i++)  
	{  
    	if(buf[i] &amp;gt; &amp;#39;1&amp;#39;)  
        	sum += (num + 1) * pow(10, len - i - 1);  
    	else if(buf[i] == &amp;#39;0&amp;#39;)  
        	sum += num * pow(10, len - i - 1);  
    	else  
        	sum += (num + 1) * getNumAfterI(buf, i, len);  
    	num = num * 10 + (buf[i] - &amp;#39;0&amp;#39;);  
	}  
	return sum;  
}  

//test  
int main()  
{  
	int num;  
	while(1)  
	{  
    	cin &amp;gt;&amp;gt; num;  
    	cout &amp;lt;&amp;lt; NumOf1AfterN(num) &amp;lt;&amp;lt; endl;  
	}  
  
	return 0;  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>求二进制表示中1的个数</title>
   <link href="http://wangpengfly.github.com/2013/06/25/%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0.html"/>
   <updated>2013-06-25T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/25/求一个数二进制表示中1的个数</id>
   <content type="html">&lt;h3 id='id47'&gt;题目&lt;/h3&gt;

&lt;p&gt;给定一个整型数据N，求数N的二进制表示中的1的个数&lt;/p&gt;

&lt;h3 id='id48'&gt;解答&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用1与N做与运算，可以检查N的最右位是否为1，将1左移一位，与N做与运算可以检查N的倒数第二最右位是否为1，同理检查N的所有位。若N为32位，则需要检查32次。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;N与N-1做与运算，N的最右一个为1的位将会变为0，按照这个思路编程，直到N为0，检查的次数为1的个数。例如二进制10110减1为10101，做与运算结果为10100，最右的1变为0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id49'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
using namespace std;  

//solution 1  
int numberof1_1(int n)  
{  
	int count = 0;  
	int one = 1;  
	for(int i = 0; i &amp;lt; 32; i++)  
	{  
	    if((n &amp;amp; one) &amp;gt; 0)  
	        count++;  
	    one &amp;lt;&amp;lt; 1;  
	}  
	return count;  
}  

//solution 2  
int numberof1_2(int n)  
{  
	int count = 0;  
	while(n)  
	{  
	    count++;  
	    n = n &amp;amp; (n - 1);  
	}  
	return count;  
}  


//test  
/*********************************** 
test number: 	
1 
100 
-1 
-100 
0 
***********************************/  
int main()  
{  
	int num;  
	while(1)  
	{  
	    cin &amp;gt;&amp;gt; num;  
	    cout &amp;lt;&amp;lt; numberof1_1(num) &amp;lt;&amp;lt; endl;  
	    cout &amp;lt;&amp;lt; numberof1_2(num) &amp;lt;&amp;lt; endl;  
	}  
	return 0;  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>小飞的电梯调度</title>
   <link href="http://wangpengfly.github.com/2013/06/25/%E5%B0%8F%E9%A3%9E%E7%9A%84%E7%94%B5%E6%A2%AF%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95.html"/>
   <updated>2013-06-25T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/25/小飞的电梯调度算法</id>
   <content type="html">&lt;h3 id='id39'&gt;题目&lt;/h3&gt;

&lt;p&gt;（编程之美 1.8）一栋楼有6层，现在设计一种电梯调度算法：电梯在一楼让大家上电梯，然后根据大家选择要到的楼层算出某一楼层i，电梯在i层停下让所有人下电梯，然后大家爬楼梯达到自己的楼层。请问电梯停在哪一层，可以使得这一次的所有乘客爬楼层之和最短？&lt;/p&gt;

&lt;h3 id='id40'&gt;解答&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最简单的想法就是遍历每一层，依次求出每一层所有人爬楼总和，总和最小的那一层即是答案，这样的话时间复杂度就是&lt;code&gt;O（N * N）&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;另一种做法就是：假设停在i层，有N1个人在i层之下，N2个人在i层，N3个人在i层之上，若电梯停在i + 1层，则爬楼层总和需要增加 N1 + N2 - N3层，若N1 + N2 - N3小于0，则i + 1层爬楼总和更小。所以按照这个思路，时间复杂度为&lt;code&gt;O（N）&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id41'&gt;注意&lt;/h3&gt;

&lt;p&gt;偏离最小值楼层越多的楼层，总爬楼层数越大，所以一旦i + 1层所爬楼层总数大于i层，就不需要往上继续找了。&lt;/p&gt;

&lt;h3 id='id42'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
using namespace std;  

int elevator(int *person, int n)  
{  
	int minFloor = 0;  
	int targetFloor = 1;  
	int N1 = 0;  
	int N2 = person[1];  
	int N3 = 0;  
	for(int i = 2; i &amp;lt; n; i++)  
	{  
    	N3 += person[i];  
    	minFloor = person[i] * (i - 1);  
	}  

	for(int i = 2; i &amp;lt; n; i++)  
	{  
    	if(N1 + N2 &amp;lt; N3)  
    	{  
        	targetFloor = i;  
        	minFloor += (N1 + N2 - N3);  
        	N1 += N2;  
        	N2 = person[i];  
        	N3 -= person[i];  
    	}  
    	else  
        	break;  
	}  

	return targetFloor;  
}  

//test  
int main()  
{  
	int person[7] = {0, 1, 2, 3, 2, 1, 2};  
	cout &amp;lt;&amp;lt; elevator(person, 7) &amp;lt;&amp;lt; endl;  
	return 0;  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>筛法求N以内所有质数</title>
   <link href="http://wangpengfly.github.com/2013/06/24/%E7%AD%9B%E6%B3%95%E6%B1%82N%E4%BB%A5%E5%86%85%E6%89%80%E6%9C%89%E8%B4%A8%E6%95%B0.html"/>
   <updated>2013-06-24T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/24/筛法求N以内所有质数</id>
   <content type="html">&lt;h3 id='id31'&gt;题目&lt;/h3&gt;

&lt;p&gt;打印出给定数N以内的所有质数&lt;/p&gt;

&lt;h3 id='id32'&gt;解答&lt;/h3&gt;

&lt;p&gt;使用筛法求N以内的所有质数&lt;/p&gt;

&lt;h3 id='id33'&gt;注意&lt;/h3&gt;

&lt;p&gt;使用&lt;code&gt;bitmap&lt;/code&gt;可以减少使用的空间，降低空间复杂度&lt;/p&gt;

&lt;h3 id='id34'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
#include &amp;lt;string.h&amp;gt;  
using namespace std;  

#define MAX 5000  

int array[MAX];//使用bitmap  

void setArray(int i)//设置bitmap位  
{  
	array[i / 32] = array[i / 32] | (0x0001 &amp;lt;&amp;lt; (i % 32));  
}  

void clrArray(int i)//清楚bitmap位  
{  
	array[i / 32] = array[i / 32] ^ (0x0001 &amp;lt;&amp;lt; (i % 32));  
}  

bool checkArray(int i)//检查某位是不是存在数  
{  
	if(array[i / 32] &amp;amp; (0x0001 &amp;lt;&amp;lt; (i % 32)))  
	    return true;  
	return false;  
}  

void getNum(int num)//筛法  
{  
	if(num &amp;lt; 2)  
	    return;  

	for(int i = 2; i &amp;lt;= num; i++)  
	    setArray(i);  

	for(int i = 2; i &amp;lt;=num; i++)  
	{  
	    if(checkArray(i))  
	    {  
	        for(int j = i; j &amp;lt;= num / i; j++)  
	        {  
	            if(checkArray(i * j))  
	                clrArray(i * j);  
	        }  
	    }  
	}  
}  

int main()  
{  
	int num;  
	while(1)  
	{  
	    cin &amp;gt;&amp;gt; num;  
	    getNum(num);  
	    for(int i = 2; i &amp;lt;= num; i++)  
	        if(checkArray(i))  
	            cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot; &amp;quot;;  
	    cout &amp;lt;&amp;lt; endl;  
	}  
	return 0;  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>按层遍历二叉树</title>
   <link href="http://wangpengfly.github.com/2013/06/24/%E6%8C%89%E5%B1%82%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91.html"/>
   <updated>2013-06-24T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/24/按层遍历二叉树</id>
   <content type="html">&lt;p&gt;参考&lt;a href='http://www.cnblogs.com/miloyip/archive/2010/05/12/binary_tree_traversal.html'&gt;博客&lt;/a&gt;&lt;/p&gt;

&lt;h3 id='id23'&gt;题目&lt;/h3&gt;

&lt;p&gt;（编程之美 3.10）给定一棵二叉树，要求按分层遍历该二叉树，即从上到下按层次访问该二叉数（每一层输出一行），每一层访问的顺序必须从左到右。&lt;/p&gt;

&lt;h3 id='id24'&gt;解答&lt;/h3&gt;

&lt;p&gt;两种解法:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将树每一层节点保存到数组中，数组中使用begin和end两个游标来标识&lt;code&gt;[begin, end)&lt;/code&gt;之间的节点是一层的，遍历每一层的节点，将该层节点的子节点从左到右加入数组中，直到所有节点都输出&lt;/li&gt;

&lt;li&gt;使用deque队列，基本思想同1，改进的地方在于，不使用游标来标识每一层，而是在每一层的结束插入一个空指针，同时将已经处理过的节点移除队列。2使用的空间比1少。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id25'&gt;注意&lt;/h3&gt;

&lt;p&gt;也可以使用两个队列，一个队列保存本层的节点，另一个保存下层的节点&lt;/p&gt;

&lt;h3 id='id26'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
#include &amp;lt;vector&amp;gt;  
#include &amp;lt;deque&amp;gt;  
using namespace std;  

struct Node  
{  
	Node *left;  
	Node *right;  
	int value;  
};  

//use vector  
void outputTreeByLevel(Node *root)  
{  
	if(root == 0)  
    	return;  
	vector&amp;lt;Node *&amp;gt; vec;  
	int begin, end;  
	begin = 0;  
	end = 0;  
	vec.push_back(root);  
	while(end &amp;lt; vec.size())  
	{  
    	end = vec.size();  
    	while(begin &amp;lt; end)  
    	{  
        	cout &amp;lt;&amp;lt; vec[begin]-&amp;gt;value &amp;lt;&amp;lt; &amp;quot; &amp;quot;;  
        	if(vec[begin]-&amp;gt;left)  
            	vec.push_back(vec[begin]-&amp;gt;left);  
        	if(vec[begin]-&amp;gt;right)  
            	vec.push_back(vec[begin]-&amp;gt;right);  
        	begin++;  
    	}  
    	cout &amp;lt;&amp;lt; endl;  
	}  
}  

//use deque  
void printBinaryTreeByLevel(Node *root)  
{  
	if(root == 0)  
    	return;  
	deque&amp;lt;Node *&amp;gt; de;  
	de.push_back(root);  
	de.push_back(0);  
	do  
	{  
    	Node *temp = de.front();  
    	de.pop_front();  
    	if(temp == 0)  
    	{  
        	cout &amp;lt;&amp;lt; endl;  
        	if(de.size() != 0)  
            	de.push_back(0);  
    	}     
    	else  
    	{  
        	cout &amp;lt;&amp;lt; temp-&amp;gt;value &amp;lt;&amp;lt; &amp;quot; &amp;quot;;  
        	if(temp-&amp;gt;left)  
            	de.push_back(temp-&amp;gt;left);  
        	if(temp-&amp;gt;right)  
            	de.push_back(temp-&amp;gt;right);  
    	}  
	}while(!de.empty());  
}  

//test  
void link(Node *nodes, int parent, int left, int right)  
{  
	if(left != -1)  
    	nodes[parent].left = &amp;amp;nodes[left];  
	if(right != -1)  
    	nodes[parent].right = &amp;amp;nodes[right];  
}  

int main()  
{  
	Node test[9] = {0};  
	for(int i = 0; i &amp;lt; 9; i++)  
    	test[i].value = i;  

	link(test, 0, 1, 2);  
	link(test, 1, 3, 4);  
	link(test, 2, 5, 6);  
	link(test, 3, 7, 8);  

	outputTreeByLevel(&amp;amp;test[0]);  
	printBinaryTreeByLevel(&amp;amp;test[0]);  
	return 0;  
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>前序遍历和中序遍历求二叉树</title>
   <link href="http://wangpengfly.github.com/2013/06/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91.html"/>
   <updated>2013-06-24T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/24/二叉树的前序遍历和中序遍历求二叉树</id>
   <content type="html">&lt;h3 id='id15'&gt;题目&lt;/h3&gt;

&lt;p&gt;已知某一个二叉树的前序遍历和中序遍历，求该二叉树的后续遍历。&lt;/p&gt;

&lt;h3 id='id16'&gt;解答&lt;/h3&gt;

&lt;p&gt;前序遍历第一个节点就是根节点，可以根据这个根节点和中序遍历的定义（先遍历左子树，再遍历根节点，最后遍历右子数）将中序遍历分成左子树的中序遍历和右子树的中序遍历，递归构造二叉树。&lt;/p&gt;

&lt;h3 id='id17'&gt;注意&lt;/h3&gt;

&lt;p&gt;二叉树的三种遍历中：&lt;strong&gt;前序遍历&lt;/strong&gt;、&lt;strong&gt;中序遍历&lt;/strong&gt;、&lt;strong&gt;后序遍历&lt;/strong&gt;并不能都可以已知两种遍历求第三种遍历，必须已知中序遍历，即前序遍历和后序遍历不能得到中序遍历。&lt;/p&gt;

&lt;p&gt;此题若是根据后序遍历和中序遍历求前序遍历，代码基本类似，只是后续遍历的结果需要从最后开始找根节点。&lt;/p&gt;

&lt;h3 id='id18'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
using namespace std;  

struct Node  
{  
	Node *left;  
	Node *right;  
	char value;  
};  

void buildTree(char *pPreOrder, char *pInOrder, int len, Node **pRoot)  
{  
	if(pPreOrder == 0 || pInOrder == 0)  
	    return;  
	Node *ptemp = new Node;  
	ptemp-&amp;gt;left = 0;  
	ptemp-&amp;gt;right = 0;  
	ptemp-&amp;gt;value = pPreOrder[0];  
	if(*pRoot == 0)  
	    *pRoot = ptemp;  

	if(len == 1)  
	    return;  

	char *pLeftEnd = pInOrder;  
	int templen = 0;  

	while(*pLeftEnd != *pPreOrder)  
	{  
	    if(pLeftEnd == 0 || pPreOrder == 0)  
	        break;  
	    if(templen++ &amp;gt; len)  
	        break;  
	    pLeftEnd++;  
	}  

	int nleftlen = (int)(pLeftEnd - pInOrder);  
	int nrightlen = (int)(len - nleftlen - 1);  

	if(nleftlen &amp;gt; 0)  
	    buildTree(pPreOrder + 1, pInOrder, nleftlen, &amp;amp;((*pRoot)-&amp;gt;left));  
	if(nrightlen &amp;gt; 0)  
	    buildTree(pPreOrder + nleftlen + 1, pInOrder + nleftlen  + 1,  
	        nrightlen, &amp;amp;((*pRoot)-&amp;gt;right));  
}  

void postOrderOutput(Node *proot)  
{  
	if(proot == 0) return;  
	postOrderOutput(proot-&amp;gt;left);  
	postOrderOutput(proot-&amp;gt;right);  
	cout &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; proot-&amp;gt;value;  
}  

int main()  
{  
	char szPreOrder[6] = {&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;f&amp;#39;};  
	char szInOrder[6] = {&amp;#39;d&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;f&amp;#39;};  

	Node *proot = 0;  
	buildTree(szPreOrder, szInOrder, 6, &amp;amp;proot);  
	postOrderOutput(proot);  
	cout &amp;lt;&amp;lt; endl;  
	return 0;  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>循环右移数组</title>
   <link href="http://wangpengfly.github.com/2013/06/24/right-rotate-array.html"/>
   <updated>2013-06-24T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/24/right-rotate-array</id>
   <content type="html">&lt;h3 id='id7'&gt;题目&lt;/h3&gt;

&lt;p&gt;设计算法，实现一个对数组循环右移k个元素的函数，要求时间复杂度为&lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id='id8'&gt;解答&lt;/h3&gt;

&lt;p&gt;第一反应想到的是保存要右移的K个元素，然后将右边的N - K个元素左移，这样也可以做到&lt;code&gt;O(n)&lt;/code&gt;的时间复杂度，但是空间复杂度是&lt;code&gt;O(k)&lt;/code&gt;。这个方法符合题意，但是不够好。 在有些题目中，对空间复杂度有进一步要求：只允许使用两个附加变量。这个时候，就只能使用下面代码的思路了，这个在编程珠矶里面有讲。&lt;/p&gt;

&lt;p&gt;思路为：对一个数组循环右移K位（这里设&lt;code&gt;K&amp;lt;N&lt;/code&gt;）可以用以下三步完成&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;反转0到K-1位数组&lt;/li&gt;

&lt;li&gt;反转k到N-1位数组&lt;/li&gt;

&lt;li&gt;反转0到N-1位数组&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如数组为1，2，3，4，5，循环右移三位，则经过三步为&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3，2，1，4，5&lt;/li&gt;

&lt;li&gt;3，2，1，5，4&lt;/li&gt;

&lt;li&gt;4，5，1，2，3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id9'&gt;注意几点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;K可能大于N，则K = K % N&lt;/li&gt;

&lt;li&gt;代码实现的循环右移K位，循环左移K位可以转换成右移N - K % N位&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='id10'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
using namespace std;  

void reverse(int *a, int beginIndex, int endIndex)  
{  
	if(beginIndex &amp;gt;= endIndex)  
	    return;  
	while(beginIndex &amp;lt; endIndex)  
	{  
    	int temp = a[beginIndex];  
    	a[beginIndex] = a[endIndex];  
    	a[endIndex] = temp;  
    	beginIndex++;  
    	endIndex--;  
	}  
}  

bool shiftKElements(int *a, int n, int k)  
{  
	if(a == 0) return false;  
	if(k == 0 || n == 0) return false;  
	k = k % n;  
	reverse(a, 0, k - 1);  
	reverse(a, k, n - 1);  
	reverse(a, 0, n - 1);  
	return true;  
}  

int main()  
{  
	int a[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};  
	if(shiftKElements(a, 10, 5))  
	    for(int i = 0; i &amp;lt; 10; i++)  
    	    cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;  
	cout &amp;lt;&amp;lt; endl;  
	return 0;  
} &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>堆排序</title>
   <link href="http://wangpengfly.github.com/2013/06/24/heap-sort.html"/>
   <updated>2013-06-24T00:00:00+08:00</updated>
   <id>http://wangpengfly.github.com/2013/06/24/heap-sort</id>
   <content type="html">&lt;h3 id='id1'&gt;题目&lt;/h3&gt;

&lt;p&gt;使用堆排序对数组进行排序&lt;/p&gt;

&lt;h3 id='id2'&gt;解答&lt;/h3&gt;

&lt;p&gt;堆排序（这里使用最大堆）的步骤是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用maxHeapify函数对数组自底向上建堆&lt;/li&gt;

&lt;li&gt;将堆首第一个元素移到堆后，然后再使用maxHeapify生成新堆，堆的长度减1&lt;/li&gt;

&lt;li&gt;循环进行2，只到堆的长度为1&lt;/li&gt;

&lt;li&gt;堆排序的时间复杂度为&lt;code&gt;O(n * logn)&lt;/code&gt;，是&lt;code&gt;不稳定排序&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id3'&gt;代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;  
#include &amp;lt;algorithm&amp;gt;  
using namespace std;  

void printArr(int *arr, int n)  
{  
		for(int i = 1; i &amp;lt;= n; i++)  
		{  
    		cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; &amp;quot;\t&amp;quot;;  
		}  
		cout &amp;lt;&amp;lt; endl;  
}  

//最关键的函数，建堆的时候该函数自低向上  
void maxHeapify(int *arr, int n, int index)  
{  
		if(arr == NULL || index &amp;gt; n)  
    		return;  
		int maxIndex = index;  
		int left = index * 2;  
		int right = index * 2 + 1;  
		if(left &amp;lt;= n &amp;amp;&amp;amp; arr[left] &amp;gt; arr[maxIndex])  
    		maxIndex = left;  
		if(right &amp;lt;= n &amp;amp;&amp;amp; arr[right] &amp;gt; arr[maxIndex])  
    		maxIndex = right;  

		if(maxIndex != index)  
		{  
    		swap(arr[index], arr[maxIndex]);  
    		maxHeapify(arr, n, maxIndex);  
		}  
}  

void makeHeap(int *arr, int n)  
{  
		for(int i = n / 2; i &amp;gt;= 1; i--)  
		{  
    		maxHeapify(arr, n, i);  
		}  
}  

void heapSort(int *arr, int n)  
{  
		makeHeap(arr, n);  
		printArr(arr, 10);  
		for(int i = 1; i &amp;lt; n; i++)  
		{  
    		swap(arr[1], arr[n - i + 1]);  
    		maxHeapify(arr, n - i, 1);  
    		printArr(arr, 10);  
		}  
}  &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 
</feed>
